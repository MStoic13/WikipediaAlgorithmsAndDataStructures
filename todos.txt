DONE - find knowledge of algorithms, problme types and data structures and how they are all used - the info for the knowledge graph - https://en.wikipedia.org/wiki/List_of_algorithms, https://en.wikipedia.org/wiki/List_of_data_structures
DONE - figure out how to extract knowledge - wikipedia api? wikitext? html? other? - html
DONE - parse html from wikipedia page - https://html-agility-pack.net/
DONE - turn the content of the page html into a graph DS - h2, h3, h4, ul
DONE - find graph plot library - https://github.com/microsoft/automatic-graph-layout
DONE - refator: move knowledge graph extraction from wikipedia into a net framework dll which all other projects can use. change the tests projects too to net framework and test your library. have a console app for debugging the dll and the form is for visualizaiton. and delete the net core projcet and the net core tests project since we will be switching to net framework otherwise the msagl libs don't work.
DONE - knowledge graph functionality: expand the uls to extract their info and put it in the graph
DONE	- still needs li label extraction, there are some problems with indentation when printing in the sandbox and test 1 might fail
DONE - try displaying the whole thing with the uls expanded see what it looks like - MDS view works best
DONE - extract the knowledge graph for algorithms, algorithm types, data structres and problem types and assign them different colors for the nodes by category
DONE 	- list of algos - red (hsa problem types backed into it) - I won't extract the problems from the algorithms because they are too tightly coupled
DONE 	- list of data structures - blue
- extract the connections between algorithms and data structures from wikipedia text - needs NLP and topic extraction probabaly and add the edges to the graph. plot the whole thing
	- for each node in the algos and DS graphs, get its link. go to that page and count the numbre of times each Data Structure name (so all DS graph nodes labels) is mentioned. Then draw edges to those which are > 0. Do this for the DS graph, too because graphs can be implemented with lists and arrays and we want edges between those to show this. Otherwise the wikipedia list doesn't show this connection
	- save the original pages html 
	- save the parsed graphs (whatever KnGNode contains: index, label, html tag, link etc.) and add ability to load from file
	- save the DS words count for each page (assign it to nodes in the graph and use the page link as index and also assing an int index)
	- remove the reference and the see also nodes fro mthe graphs
	- combine everything into a single graph so tha tindexes don't overlap and save it
	- render svg and send to a studio to print a giant poster of it. Enjoy :)
- readme: use a template to fill in more information such as tests, how to run, how to plot, what nugets it uses, how to setup etc.